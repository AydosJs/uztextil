/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * API Documentation
 * API for your Django project
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AdditionalService,
  ApiV1AdditionalServicesListListParams,
  ApplicationAdditionalService,
  CustomerCreate,
  ManufacturerCreate,
  ManufacturerDetail,
  ManufacturerList,
  Slider,
  UserApply
} from '.././model';

import { customInstance } from '../../api-client';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * - YAML: application/vnd.oai.openapi
- JSON: application/vnd.oai.openapi+json
 * @summary OpenApi3 schema for this API. Format can be selected via content negotiation.
 */
export const apiSchemaList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/api/schema/`, method: 'GET', signal
    },
      options);
    }
  

export const getApiSchemaListQueryKey = () => {
    return [`/api/schema/`] as const;
    }

    
export const getApiSchemaListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof apiSchemaList>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiSchemaListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiSchemaList>>> = ({ signal }) => apiSchemaList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiSchemaListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiSchemaList>>>
export type ApiSchemaListInfiniteQueryError = unknown


export function useApiSchemaListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiSchemaList>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiSchemaList>>,
          TError,
          Awaited<ReturnType<typeof apiSchemaList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiSchemaListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiSchemaList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiSchemaList>>,
          TError,
          Awaited<ReturnType<typeof apiSchemaList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiSchemaListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiSchemaList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary OpenApi3 schema for this API. Format can be selected via content negotiation.
 */

export function useApiSchemaListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiSchemaList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiSchemaListInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiSchemaListQueryOptions = <TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiSchemaListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiSchemaList>>> = ({ signal }) => apiSchemaList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiSchemaListQueryResult = NonNullable<Awaited<ReturnType<typeof apiSchemaList>>>
export type ApiSchemaListQueryError = unknown


export function useApiSchemaList<TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiSchemaList>>,
          TError,
          Awaited<ReturnType<typeof apiSchemaList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiSchemaList<TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiSchemaList>>,
          TError,
          Awaited<ReturnType<typeof apiSchemaList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiSchemaList<TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary OpenApi3 schema for this API. Format can be selected via content negotiation.
 */

export function useApiSchemaList<TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiSchemaListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1AdditionalServicesApplyCreate = (
    userApply: NonReadonly<UserApply>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserApply>(
      {url: `/api/v1/additional-services/apply/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userApply, signal
    },
      options);
    }
  


export const getApiV1AdditionalServicesApplyCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesApplyCreate>>, TError,{data: NonReadonly<UserApply>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesApplyCreate>>, TError,{data: NonReadonly<UserApply>}, TContext> => {

const mutationKey = ['apiV1AdditionalServicesApplyCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1AdditionalServicesApplyCreate>>, {data: NonReadonly<UserApply>}> = (props) => {
          const {data} = props ?? {};

          return  apiV1AdditionalServicesApplyCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1AdditionalServicesApplyCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1AdditionalServicesApplyCreate>>>
    export type ApiV1AdditionalServicesApplyCreateMutationBody = NonReadonly<UserApply>
    export type ApiV1AdditionalServicesApplyCreateMutationError = unknown

    export const useApiV1AdditionalServicesApplyCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesApplyCreate>>, TError,{data: NonReadonly<UserApply>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiV1AdditionalServicesApplyCreate>>,
        TError,
        {data: NonReadonly<UserApply>},
        TContext
      > => {

      const mutationOptions = getApiV1AdditionalServicesApplyCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiV1AdditionalServicesListList = (
    telegramId: string,
    params?: ApiV1AdditionalServicesListListParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AdditionalService[]>(
      {url: `/api/v1/additional-services/${telegramId}/list/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getApiV1AdditionalServicesListListQueryKey = (telegramId?: string,
    params?: ApiV1AdditionalServicesListListParams,) => {
    return [`/api/v1/additional-services/${telegramId}/list/`, ...(params ? [params]: [])] as const;
    }

    
export const getApiV1AdditionalServicesListListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, ApiV1AdditionalServicesListListParams['pageParam']>, TError = unknown>(telegramId: string,
    params?: ApiV1AdditionalServicesListListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData, QueryKey, ApiV1AdditionalServicesListListParams['pageParam']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1AdditionalServicesListListQueryKey(telegramId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, QueryKey, ApiV1AdditionalServicesListListParams['pageParam']> = ({ signal, pageParam }) => apiV1AdditionalServicesListList(telegramId,{...params, 'pageParam': pageParam || params?.['pageParam']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(telegramId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData, QueryKey, ApiV1AdditionalServicesListListParams['pageParam']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1AdditionalServicesListListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>>
export type ApiV1AdditionalServicesListListInfiniteQueryError = unknown


export function useApiV1AdditionalServicesListListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, ApiV1AdditionalServicesListListParams['pageParam']>, TError = unknown>(
 telegramId: string,
    params: undefined |  ApiV1AdditionalServicesListListParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData, QueryKey, ApiV1AdditionalServicesListListParams['pageParam']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1AdditionalServicesListListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, ApiV1AdditionalServicesListListParams['pageParam']>, TError = unknown>(
 telegramId: string,
    params?: ApiV1AdditionalServicesListListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData, QueryKey, ApiV1AdditionalServicesListListParams['pageParam']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1AdditionalServicesListListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, ApiV1AdditionalServicesListListParams['pageParam']>, TError = unknown>(
 telegramId: string,
    params?: ApiV1AdditionalServicesListListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData, QueryKey, ApiV1AdditionalServicesListListParams['pageParam']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1AdditionalServicesListListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, ApiV1AdditionalServicesListListParams['pageParam']>, TError = unknown>(
 telegramId: string,
    params?: ApiV1AdditionalServicesListListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData, QueryKey, ApiV1AdditionalServicesListListParams['pageParam']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1AdditionalServicesListListInfiniteQueryOptions(telegramId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiV1AdditionalServicesListListQueryOptions = <TData = Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError = unknown>(telegramId: string,
    params?: ApiV1AdditionalServicesListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1AdditionalServicesListListQueryKey(telegramId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>> = ({ signal }) => apiV1AdditionalServicesListList(telegramId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(telegramId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1AdditionalServicesListListQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>>
export type ApiV1AdditionalServicesListListQueryError = unknown


export function useApiV1AdditionalServicesListList<TData = Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError = unknown>(
 telegramId: string,
    params: undefined |  ApiV1AdditionalServicesListListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1AdditionalServicesListList<TData = Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError = unknown>(
 telegramId: string,
    params?: ApiV1AdditionalServicesListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1AdditionalServicesListList<TData = Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError = unknown>(
 telegramId: string,
    params?: ApiV1AdditionalServicesListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1AdditionalServicesListList<TData = Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError = unknown>(
 telegramId: string,
    params?: ApiV1AdditionalServicesListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1AdditionalServicesListListQueryOptions(telegramId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1ApplicationAdditionalServicesCreateCreate = (
    applicationAdditionalService: NonReadonly<ApplicationAdditionalService>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApplicationAdditionalService>(
      {url: `/api/v1/application-additional-services/create/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: applicationAdditionalService, signal
    },
      options);
    }
  


export const getApiV1ApplicationAdditionalServicesCreateCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationAdditionalServicesCreateCreate>>, TError,{data: NonReadonly<ApplicationAdditionalService>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationAdditionalServicesCreateCreate>>, TError,{data: NonReadonly<ApplicationAdditionalService>}, TContext> => {

const mutationKey = ['apiV1ApplicationAdditionalServicesCreateCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1ApplicationAdditionalServicesCreateCreate>>, {data: NonReadonly<ApplicationAdditionalService>}> = (props) => {
          const {data} = props ?? {};

          return  apiV1ApplicationAdditionalServicesCreateCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1ApplicationAdditionalServicesCreateCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1ApplicationAdditionalServicesCreateCreate>>>
    export type ApiV1ApplicationAdditionalServicesCreateCreateMutationBody = NonReadonly<ApplicationAdditionalService>
    export type ApiV1ApplicationAdditionalServicesCreateCreateMutationError = unknown

    export const useApiV1ApplicationAdditionalServicesCreateCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationAdditionalServicesCreateCreate>>, TError,{data: NonReadonly<ApplicationAdditionalService>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiV1ApplicationAdditionalServicesCreateCreate>>,
        TError,
        {data: NonReadonly<ApplicationAdditionalService>},
        TContext
      > => {

      const mutationOptions = getApiV1ApplicationAdditionalServicesCreateCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiV1ApplicationCustomerCreateCreate = (
    customerCreate: NonReadonly<CustomerCreate>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CustomerCreate>(
      {url: `/api/v1/application/customer-create/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customerCreate, signal
    },
      options);
    }
  


export const getApiV1ApplicationCustomerCreateCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationCustomerCreateCreate>>, TError,{data: NonReadonly<CustomerCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationCustomerCreateCreate>>, TError,{data: NonReadonly<CustomerCreate>}, TContext> => {

const mutationKey = ['apiV1ApplicationCustomerCreateCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1ApplicationCustomerCreateCreate>>, {data: NonReadonly<CustomerCreate>}> = (props) => {
          const {data} = props ?? {};

          return  apiV1ApplicationCustomerCreateCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1ApplicationCustomerCreateCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1ApplicationCustomerCreateCreate>>>
    export type ApiV1ApplicationCustomerCreateCreateMutationBody = NonReadonly<CustomerCreate>
    export type ApiV1ApplicationCustomerCreateCreateMutationError = unknown

    export const useApiV1ApplicationCustomerCreateCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationCustomerCreateCreate>>, TError,{data: NonReadonly<CustomerCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiV1ApplicationCustomerCreateCreate>>,
        TError,
        {data: NonReadonly<CustomerCreate>},
        TContext
      > => {

      const mutationOptions = getApiV1ApplicationCustomerCreateCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiV1ApplicationManufacturCreateCreate = (
    manufacturerCreate: NonReadonly<ManufacturerCreate>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ManufacturerCreate>(
      {url: `/api/v1/application/manufactur-create/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: manufacturerCreate, signal
    },
      options);
    }
  


export const getApiV1ApplicationManufacturCreateCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturCreateCreate>>, TError,{data: NonReadonly<ManufacturerCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturCreateCreate>>, TError,{data: NonReadonly<ManufacturerCreate>}, TContext> => {

const mutationKey = ['apiV1ApplicationManufacturCreateCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1ApplicationManufacturCreateCreate>>, {data: NonReadonly<ManufacturerCreate>}> = (props) => {
          const {data} = props ?? {};

          return  apiV1ApplicationManufacturCreateCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1ApplicationManufacturCreateCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1ApplicationManufacturCreateCreate>>>
    export type ApiV1ApplicationManufacturCreateCreateMutationBody = NonReadonly<ManufacturerCreate>
    export type ApiV1ApplicationManufacturCreateCreateMutationError = unknown

    export const useApiV1ApplicationManufacturCreateCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturCreateCreate>>, TError,{data: NonReadonly<ManufacturerCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiV1ApplicationManufacturCreateCreate>>,
        TError,
        {data: NonReadonly<ManufacturerCreate>},
        TContext
      > => {

      const mutationOptions = getApiV1ApplicationManufacturCreateCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiV1ApplicationManufacturerDetailRead = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ManufacturerDetail>(
      {url: `/api/v1/application/manufacturer-detail/${id}/`, method: 'GET', signal
    },
      options);
    }
  

export const getApiV1ApplicationManufacturerDetailReadQueryKey = (id?: number,) => {
    return [`/api/v1/application/manufacturer-detail/${id}/`] as const;
    }

    
export const getApiV1ApplicationManufacturerDetailReadInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1ApplicationManufacturerDetailReadQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>> = ({ signal }) => apiV1ApplicationManufacturerDetailRead(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1ApplicationManufacturerDetailReadInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>>
export type ApiV1ApplicationManufacturerDetailReadInfiniteQueryError = unknown


export function useApiV1ApplicationManufacturerDetailReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>,
          TError,
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ApplicationManufacturerDetailReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>,
          TError,
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ApplicationManufacturerDetailReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1ApplicationManufacturerDetailReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1ApplicationManufacturerDetailReadInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiV1ApplicationManufacturerDetailReadQueryOptions = <TData = Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1ApplicationManufacturerDetailReadQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>> = ({ signal }) => apiV1ApplicationManufacturerDetailRead(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1ApplicationManufacturerDetailReadQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>>
export type ApiV1ApplicationManufacturerDetailReadQueryError = unknown


export function useApiV1ApplicationManufacturerDetailRead<TData = Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>,
          TError,
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ApplicationManufacturerDetailRead<TData = Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>,
          TError,
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ApplicationManufacturerDetailRead<TData = Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1ApplicationManufacturerDetailRead<TData = Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerDetailRead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1ApplicationManufacturerDetailReadQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1ApplicationManufacturerListList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ManufacturerList[]>(
      {url: `/api/v1/application/manufacturer-list/`, method: 'GET', signal
    },
      options);
    }
  

export const getApiV1ApplicationManufacturerListListQueryKey = () => {
    return [`/api/v1/application/manufacturer-list/`] as const;
    }

    
export const getApiV1ApplicationManufacturerListListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1ApplicationManufacturerListListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>> = ({ signal }) => apiV1ApplicationManufacturerListList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1ApplicationManufacturerListListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>>
export type ApiV1ApplicationManufacturerListListInfiniteQueryError = unknown


export function useApiV1ApplicationManufacturerListListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ApplicationManufacturerListListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ApplicationManufacturerListListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1ApplicationManufacturerListListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1ApplicationManufacturerListListInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiV1ApplicationManufacturerListListQueryOptions = <TData = Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1ApplicationManufacturerListListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>> = ({ signal }) => apiV1ApplicationManufacturerListList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1ApplicationManufacturerListListQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>>
export type ApiV1ApplicationManufacturerListListQueryError = unknown


export function useApiV1ApplicationManufacturerListList<TData = Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ApplicationManufacturerListList<TData = Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ApplicationManufacturerListList<TData = Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1ApplicationManufacturerListList<TData = Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturerListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1ApplicationManufacturerListListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1BotUserRegisterCreate = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/bot-user/register/`, method: 'POST', signal
    },
      options);
    }
  


export const getApiV1BotUserRegisterCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1BotUserRegisterCreate>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1BotUserRegisterCreate>>, TError,void, TContext> => {

const mutationKey = ['apiV1BotUserRegisterCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1BotUserRegisterCreate>>, void> = () => {
          

          return  apiV1BotUserRegisterCreate(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1BotUserRegisterCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1BotUserRegisterCreate>>>
    
    export type ApiV1BotUserRegisterCreateMutationError = unknown

    export const useApiV1BotUserRegisterCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1BotUserRegisterCreate>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiV1BotUserRegisterCreate>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getApiV1BotUserRegisterCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiV1SlidersList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Slider[]>(
      {url: `/api/v1/sliders/`, method: 'GET', signal
    },
      options);
    }
  

export const getApiV1SlidersListQueryKey = () => {
    return [`/api/v1/sliders/`] as const;
    }

    
export const getApiV1SlidersListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof apiV1SlidersList>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1SlidersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1SlidersListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1SlidersList>>> = ({ signal }) => apiV1SlidersList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1SlidersList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1SlidersListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1SlidersList>>>
export type ApiV1SlidersListInfiniteQueryError = unknown


export function useApiV1SlidersListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1SlidersList>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1SlidersList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1SlidersList>>,
          TError,
          Awaited<ReturnType<typeof apiV1SlidersList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1SlidersListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1SlidersList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1SlidersList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1SlidersList>>,
          TError,
          Awaited<ReturnType<typeof apiV1SlidersList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1SlidersListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1SlidersList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1SlidersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1SlidersListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiV1SlidersList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1SlidersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1SlidersListInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiV1SlidersListQueryOptions = <TData = Awaited<ReturnType<typeof apiV1SlidersList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1SlidersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1SlidersListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1SlidersList>>> = ({ signal }) => apiV1SlidersList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1SlidersList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1SlidersListQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1SlidersList>>>
export type ApiV1SlidersListQueryError = unknown


export function useApiV1SlidersList<TData = Awaited<ReturnType<typeof apiV1SlidersList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1SlidersList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1SlidersList>>,
          TError,
          Awaited<ReturnType<typeof apiV1SlidersList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1SlidersList<TData = Awaited<ReturnType<typeof apiV1SlidersList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1SlidersList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1SlidersList>>,
          TError,
          Awaited<ReturnType<typeof apiV1SlidersList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1SlidersList<TData = Awaited<ReturnType<typeof apiV1SlidersList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1SlidersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1SlidersList<TData = Awaited<ReturnType<typeof apiV1SlidersList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1SlidersList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1SlidersListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



