/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * API Documentation
 * API for your Django project
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AdditionalService,
  ApplicationAdditionalService,
  CustomerCreate,
  Login,
  ManufacturerCreate,
  Register
} from '.././model';

import { customInstance } from '../../api-client';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * - YAML: application/vnd.oai.openapi
- JSON: application/vnd.oai.openapi+json
 * @summary OpenApi3 schema for this API. Format can be selected via content negotiation.
 */
export const apiSchemaList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/api/schema/`, method: 'GET', signal
    },
      options);
    }
  

export const getApiSchemaListQueryKey = () => {
    return [`/api/schema/`] as const;
    }

    
export const getApiSchemaListInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>( options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiSchemaListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiSchemaList>>> = ({ signal }) => apiSchemaList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiSchemaListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiSchemaList>>>
export type ApiSchemaListInfiniteQueryError = unknown


/**
 * @summary OpenApi3 schema for this API. Format can be selected via content negotiation.
 */

export function useApiSchemaListInfinite<TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiSchemaListInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiSchemaListQueryOptions = <TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiSchemaListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiSchemaList>>> = ({ signal }) => apiSchemaList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiSchemaListQueryResult = NonNullable<Awaited<ReturnType<typeof apiSchemaList>>>
export type ApiSchemaListQueryError = unknown


/**
 * @summary OpenApi3 schema for this API. Format can be selected via content negotiation.
 */

export function useApiSchemaList<TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiSchemaListQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1AdditionalServicesListList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AdditionalService[]>(
      {url: `/api/v1/additional-services/list/`, method: 'GET', signal
    },
      options);
    }
  

export const getApiV1AdditionalServicesListListQueryKey = () => {
    return [`/api/v1/additional-services/list/`] as const;
    }

    
export const getApiV1AdditionalServicesListListInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError = unknown>( options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1AdditionalServicesListListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>> = ({ signal }) => apiV1AdditionalServicesListList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiV1AdditionalServicesListListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>>
export type ApiV1AdditionalServicesListListInfiniteQueryError = unknown



export function useApiV1AdditionalServicesListListInfinite<TData = Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError = unknown>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiV1AdditionalServicesListListInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiV1AdditionalServicesListListQueryOptions = <TData = Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1AdditionalServicesListListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>> = ({ signal }) => apiV1AdditionalServicesListList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiV1AdditionalServicesListListQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>>
export type ApiV1AdditionalServicesListListQueryError = unknown



export function useApiV1AdditionalServicesListList<TData = Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiV1AdditionalServicesListList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiV1AdditionalServicesListListQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1ApplicationAdditionalServicesCreateCreate = (
    applicationAdditionalService: NonReadonly<ApplicationAdditionalService>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApplicationAdditionalService>(
      {url: `/api/v1/application-additional-services/create/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: applicationAdditionalService, signal
    },
      options);
    }
  


export const getApiV1ApplicationAdditionalServicesCreateCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationAdditionalServicesCreateCreate>>, TError,{data: NonReadonly<ApplicationAdditionalService>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationAdditionalServicesCreateCreate>>, TError,{data: NonReadonly<ApplicationAdditionalService>}, TContext> => {

const mutationKey = ['apiV1ApplicationAdditionalServicesCreateCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1ApplicationAdditionalServicesCreateCreate>>, {data: NonReadonly<ApplicationAdditionalService>}> = (props) => {
          const {data} = props ?? {};

          return  apiV1ApplicationAdditionalServicesCreateCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1ApplicationAdditionalServicesCreateCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1ApplicationAdditionalServicesCreateCreate>>>
    export type ApiV1ApplicationAdditionalServicesCreateCreateMutationBody = NonReadonly<ApplicationAdditionalService>
    export type ApiV1ApplicationAdditionalServicesCreateCreateMutationError = unknown

    export const useApiV1ApplicationAdditionalServicesCreateCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationAdditionalServicesCreateCreate>>, TError,{data: NonReadonly<ApplicationAdditionalService>}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof apiV1ApplicationAdditionalServicesCreateCreate>>,
        TError,
        {data: NonReadonly<ApplicationAdditionalService>},
        TContext
      > => {

      const mutationOptions = getApiV1ApplicationAdditionalServicesCreateCreateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const apiV1ApplicationCustomerCreateCreate = (
    customerCreate: NonReadonly<CustomerCreate>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CustomerCreate>(
      {url: `/api/v1/application/customer-create/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customerCreate, signal
    },
      options);
    }
  


export const getApiV1ApplicationCustomerCreateCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationCustomerCreateCreate>>, TError,{data: NonReadonly<CustomerCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationCustomerCreateCreate>>, TError,{data: NonReadonly<CustomerCreate>}, TContext> => {

const mutationKey = ['apiV1ApplicationCustomerCreateCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1ApplicationCustomerCreateCreate>>, {data: NonReadonly<CustomerCreate>}> = (props) => {
          const {data} = props ?? {};

          return  apiV1ApplicationCustomerCreateCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1ApplicationCustomerCreateCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1ApplicationCustomerCreateCreate>>>
    export type ApiV1ApplicationCustomerCreateCreateMutationBody = NonReadonly<CustomerCreate>
    export type ApiV1ApplicationCustomerCreateCreateMutationError = unknown

    export const useApiV1ApplicationCustomerCreateCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationCustomerCreateCreate>>, TError,{data: NonReadonly<CustomerCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof apiV1ApplicationCustomerCreateCreate>>,
        TError,
        {data: NonReadonly<CustomerCreate>},
        TContext
      > => {

      const mutationOptions = getApiV1ApplicationCustomerCreateCreateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const apiV1ApplicationManufacturCreateCreate = (
    manufacturerCreate: NonReadonly<ManufacturerCreate>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ManufacturerCreate>(
      {url: `/api/v1/application/manufactur-create/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: manufacturerCreate, signal
    },
      options);
    }
  


export const getApiV1ApplicationManufacturCreateCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturCreateCreate>>, TError,{data: NonReadonly<ManufacturerCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturCreateCreate>>, TError,{data: NonReadonly<ManufacturerCreate>}, TContext> => {

const mutationKey = ['apiV1ApplicationManufacturCreateCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1ApplicationManufacturCreateCreate>>, {data: NonReadonly<ManufacturerCreate>}> = (props) => {
          const {data} = props ?? {};

          return  apiV1ApplicationManufacturCreateCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1ApplicationManufacturCreateCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1ApplicationManufacturCreateCreate>>>
    export type ApiV1ApplicationManufacturCreateCreateMutationBody = NonReadonly<ManufacturerCreate>
    export type ApiV1ApplicationManufacturCreateCreateMutationError = unknown

    export const useApiV1ApplicationManufacturCreateCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationManufacturCreateCreate>>, TError,{data: NonReadonly<ManufacturerCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof apiV1ApplicationManufacturCreateCreate>>,
        TError,
        {data: NonReadonly<ManufacturerCreate>},
        TContext
      > => {

      const mutationOptions = getApiV1ApplicationManufacturCreateCreateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const apiV1AuthLoginCreate = (
    login: Login,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Login>(
      {url: `/api/v1/auth/login/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: login, signal
    },
      options);
    }
  


export const getApiV1AuthLoginCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1AuthLoginCreate>>, TError,{data: Login}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1AuthLoginCreate>>, TError,{data: Login}, TContext> => {

const mutationKey = ['apiV1AuthLoginCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1AuthLoginCreate>>, {data: Login}> = (props) => {
          const {data} = props ?? {};

          return  apiV1AuthLoginCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1AuthLoginCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1AuthLoginCreate>>>
    export type ApiV1AuthLoginCreateMutationBody = Login
    export type ApiV1AuthLoginCreateMutationError = unknown

    export const useApiV1AuthLoginCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1AuthLoginCreate>>, TError,{data: Login}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof apiV1AuthLoginCreate>>,
        TError,
        {data: Login},
        TContext
      > => {

      const mutationOptions = getApiV1AuthLoginCreateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const apiV1AuthLogoutCreate = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/auth/logout/`, method: 'POST', signal
    },
      options);
    }
  


export const getApiV1AuthLogoutCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1AuthLogoutCreate>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1AuthLogoutCreate>>, TError,void, TContext> => {

const mutationKey = ['apiV1AuthLogoutCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1AuthLogoutCreate>>, void> = () => {
          

          return  apiV1AuthLogoutCreate(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1AuthLogoutCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1AuthLogoutCreate>>>
    
    export type ApiV1AuthLogoutCreateMutationError = unknown

    export const useApiV1AuthLogoutCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1AuthLogoutCreate>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof apiV1AuthLogoutCreate>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getApiV1AuthLogoutCreateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    export const apiV1AuthRegisterCreate = (
    register: Register,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Register>(
      {url: `/api/v1/auth/register/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: register, signal
    },
      options);
    }
  


export const getApiV1AuthRegisterCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1AuthRegisterCreate>>, TError,{data: Register}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1AuthRegisterCreate>>, TError,{data: Register}, TContext> => {

const mutationKey = ['apiV1AuthRegisterCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1AuthRegisterCreate>>, {data: Register}> = (props) => {
          const {data} = props ?? {};

          return  apiV1AuthRegisterCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1AuthRegisterCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1AuthRegisterCreate>>>
    export type ApiV1AuthRegisterCreateMutationBody = Register
    export type ApiV1AuthRegisterCreateMutationError = unknown

    export const useApiV1AuthRegisterCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1AuthRegisterCreate>>, TError,{data: Register}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof apiV1AuthRegisterCreate>>,
        TError,
        {data: Register},
        TContext
      > => {

      const mutationOptions = getApiV1AuthRegisterCreateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    