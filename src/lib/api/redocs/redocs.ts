/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * API Documentation
 * API for your Django project
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customInstance } from '../../api-client';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const redocsList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/redocs/`, method: 'GET', signal
    },
      options);
    }
  

export const getRedocsListQueryKey = () => {
    return [`/redocs/`] as const;
    }

    
export const getRedocsListInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof redocsList>>, TError = unknown>( options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof redocsList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRedocsListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof redocsList>>> = ({ signal }) => redocsList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof redocsList>>, TError, TData> & { queryKey: QueryKey }
}

export type RedocsListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof redocsList>>>
export type RedocsListInfiniteQueryError = unknown



export function useRedocsListInfinite<TData = Awaited<ReturnType<typeof redocsList>>, TError = unknown>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof redocsList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getRedocsListInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getRedocsListQueryOptions = <TData = Awaited<ReturnType<typeof redocsList>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof redocsList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRedocsListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof redocsList>>> = ({ signal }) => redocsList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof redocsList>>, TError, TData> & { queryKey: QueryKey }
}

export type RedocsListQueryResult = NonNullable<Awaited<ReturnType<typeof redocsList>>>
export type RedocsListQueryError = unknown



export function useRedocsList<TData = Awaited<ReturnType<typeof redocsList>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof redocsList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getRedocsListQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



