/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * API Documentation
 * API for your Django project
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AdditionalService,
  ApiV1ManufacturerListListParams,
  ApiV1PackageListListParams,
  ApiV1ServiceListListParams,
  ApiV1SliderListListParams,
  ApplicationCreate,
  ApplicationList,
  CustomerCreate,
  ManufacturerCreate,
  ManufacturerDetail,
  ManufacturerList,
  OfferList,
  OfferUpdate,
  OfferUpdateBody,
  PackageDetail,
  PackageList,
  Slider,
  UserApply
} from '.././model';

import { customInstance } from '../../api-client';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * - YAML: application/vnd.oai.openapi
- JSON: application/vnd.oai.openapi+json
 * @summary OpenApi3 schema for this API. Format can be selected via content negotiation.
 */
export const apiSchemaList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/api/schema/`, method: 'GET', signal
    },
      options);
    }
  

export const getApiSchemaListQueryKey = () => {
    return [`/api/schema/`] as const;
    }

    
export const getApiSchemaListQueryOptions = <TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiSchemaListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiSchemaList>>> = ({ signal }) => apiSchemaList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiSchemaListQueryResult = NonNullable<Awaited<ReturnType<typeof apiSchemaList>>>
export type ApiSchemaListQueryError = unknown


export function useApiSchemaList<TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiSchemaList>>,
          TError,
          Awaited<ReturnType<typeof apiSchemaList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiSchemaList<TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiSchemaList>>,
          TError,
          Awaited<ReturnType<typeof apiSchemaList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiSchemaList<TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary OpenApi3 schema for this API. Format can be selected via content negotiation.
 */

export function useApiSchemaList<TData = Awaited<ReturnType<typeof apiSchemaList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiSchemaList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiSchemaListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1ApplicationCreateCreate = (
    applicationCreate: NonReadonly<ApplicationCreate>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApplicationCreate>(
      {url: `/api/v1/application/create/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: applicationCreate, signal
    },
      options);
    }
  


export const getApiV1ApplicationCreateCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationCreateCreate>>, TError,{data: NonReadonly<ApplicationCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationCreateCreate>>, TError,{data: NonReadonly<ApplicationCreate>}, TContext> => {

const mutationKey = ['apiV1ApplicationCreateCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1ApplicationCreateCreate>>, {data: NonReadonly<ApplicationCreate>}> = (props) => {
          const {data} = props ?? {};

          return  apiV1ApplicationCreateCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1ApplicationCreateCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1ApplicationCreateCreate>>>
    export type ApiV1ApplicationCreateCreateMutationBody = NonReadonly<ApplicationCreate>
    export type ApiV1ApplicationCreateCreateMutationError = unknown

    export const useApiV1ApplicationCreateCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ApplicationCreateCreate>>, TError,{data: NonReadonly<ApplicationCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiV1ApplicationCreateCreate>>,
        TError,
        {data: NonReadonly<ApplicationCreate>},
        TContext
      > => {

      const mutationOptions = getApiV1ApplicationCreateCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiV1ApplicationListList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApplicationList[]>(
      {url: `/api/v1/application/list/`, method: 'GET', signal
    },
      options);
    }
  

export const getApiV1ApplicationListListQueryKey = () => {
    return [`/api/v1/application/list/`] as const;
    }

    
export const getApiV1ApplicationListListQueryOptions = <TData = Awaited<ReturnType<typeof apiV1ApplicationListList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1ApplicationListListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1ApplicationListList>>> = ({ signal }) => apiV1ApplicationListList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationListList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1ApplicationListListQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1ApplicationListList>>>
export type ApiV1ApplicationListListQueryError = unknown


export function useApiV1ApplicationListList<TData = Awaited<ReturnType<typeof apiV1ApplicationListList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationListList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ApplicationListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1ApplicationListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ApplicationListList<TData = Awaited<ReturnType<typeof apiV1ApplicationListList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationListList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ApplicationListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1ApplicationListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ApplicationListList<TData = Awaited<ReturnType<typeof apiV1ApplicationListList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1ApplicationListList<TData = Awaited<ReturnType<typeof apiV1ApplicationListList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ApplicationListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1ApplicationListListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1BotUserRegisterCreate = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/bot-user/register/`, method: 'POST', signal
    },
      options);
    }
  


export const getApiV1BotUserRegisterCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1BotUserRegisterCreate>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1BotUserRegisterCreate>>, TError,void, TContext> => {

const mutationKey = ['apiV1BotUserRegisterCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1BotUserRegisterCreate>>, void> = () => {
          

          return  apiV1BotUserRegisterCreate(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1BotUserRegisterCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1BotUserRegisterCreate>>>
    
    export type ApiV1BotUserRegisterCreateMutationError = unknown

    export const useApiV1BotUserRegisterCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1BotUserRegisterCreate>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiV1BotUserRegisterCreate>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getApiV1BotUserRegisterCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiV1CustomerCreateCreate = (
    customerCreate: NonReadonly<CustomerCreate>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CustomerCreate>(
      {url: `/api/v1/customer/create/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customerCreate, signal
    },
      options);
    }
  


export const getApiV1CustomerCreateCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1CustomerCreateCreate>>, TError,{data: NonReadonly<CustomerCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1CustomerCreateCreate>>, TError,{data: NonReadonly<CustomerCreate>}, TContext> => {

const mutationKey = ['apiV1CustomerCreateCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1CustomerCreateCreate>>, {data: NonReadonly<CustomerCreate>}> = (props) => {
          const {data} = props ?? {};

          return  apiV1CustomerCreateCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1CustomerCreateCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1CustomerCreateCreate>>>
    export type ApiV1CustomerCreateCreateMutationBody = NonReadonly<CustomerCreate>
    export type ApiV1CustomerCreateCreateMutationError = unknown

    export const useApiV1CustomerCreateCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1CustomerCreateCreate>>, TError,{data: NonReadonly<CustomerCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiV1CustomerCreateCreate>>,
        TError,
        {data: NonReadonly<CustomerCreate>},
        TContext
      > => {

      const mutationOptions = getApiV1CustomerCreateCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiV1ManufacturerCreateCreate = (
    manufacturerCreate: NonReadonly<ManufacturerCreate>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ManufacturerCreate>(
      {url: `/api/v1/manufacturer/create/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: manufacturerCreate, signal
    },
      options);
    }
  


export const getApiV1ManufacturerCreateCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ManufacturerCreateCreate>>, TError,{data: NonReadonly<ManufacturerCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1ManufacturerCreateCreate>>, TError,{data: NonReadonly<ManufacturerCreate>}, TContext> => {

const mutationKey = ['apiV1ManufacturerCreateCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1ManufacturerCreateCreate>>, {data: NonReadonly<ManufacturerCreate>}> = (props) => {
          const {data} = props ?? {};

          return  apiV1ManufacturerCreateCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1ManufacturerCreateCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1ManufacturerCreateCreate>>>
    export type ApiV1ManufacturerCreateCreateMutationBody = NonReadonly<ManufacturerCreate>
    export type ApiV1ManufacturerCreateCreateMutationError = unknown

    export const useApiV1ManufacturerCreateCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ManufacturerCreateCreate>>, TError,{data: NonReadonly<ManufacturerCreate>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiV1ManufacturerCreateCreate>>,
        TError,
        {data: NonReadonly<ManufacturerCreate>},
        TContext
      > => {

      const mutationOptions = getApiV1ManufacturerCreateCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiV1ManufacturerDetailRead = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ManufacturerDetail>(
      {url: `/api/v1/manufacturer/detail/${id}/`, method: 'GET', signal
    },
      options);
    }
  

export const getApiV1ManufacturerDetailReadQueryKey = (id?: number,) => {
    return [`/api/v1/manufacturer/detail/${id}/`] as const;
    }

    
export const getApiV1ManufacturerDetailReadQueryOptions = <TData = Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1ManufacturerDetailReadQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>> = ({ signal }) => apiV1ManufacturerDetailRead(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1ManufacturerDetailReadQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>>
export type ApiV1ManufacturerDetailReadQueryError = unknown


export function useApiV1ManufacturerDetailRead<TData = Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>,
          TError,
          Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ManufacturerDetailRead<TData = Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>,
          TError,
          Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ManufacturerDetailRead<TData = Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1ManufacturerDetailRead<TData = Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ManufacturerDetailRead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1ManufacturerDetailReadQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1ManufacturerListList = (
    params?: ApiV1ManufacturerListListParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ManufacturerList[]>(
      {url: `/api/v1/manufacturer/list/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getApiV1ManufacturerListListQueryKey = (params?: ApiV1ManufacturerListListParams,) => {
    return [`/api/v1/manufacturer/list/`, ...(params ? [params]: [])] as const;
    }

    
export const getApiV1ManufacturerListListQueryOptions = <TData = Awaited<ReturnType<typeof apiV1ManufacturerListList>>, TError = unknown>(params?: ApiV1ManufacturerListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ManufacturerListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1ManufacturerListListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1ManufacturerListList>>> = ({ signal }) => apiV1ManufacturerListList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1ManufacturerListList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1ManufacturerListListQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1ManufacturerListList>>>
export type ApiV1ManufacturerListListQueryError = unknown


export function useApiV1ManufacturerListList<TData = Awaited<ReturnType<typeof apiV1ManufacturerListList>>, TError = unknown>(
 params: undefined |  ApiV1ManufacturerListListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ManufacturerListList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ManufacturerListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1ManufacturerListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ManufacturerListList<TData = Awaited<ReturnType<typeof apiV1ManufacturerListList>>, TError = unknown>(
 params?: ApiV1ManufacturerListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ManufacturerListList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ManufacturerListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1ManufacturerListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ManufacturerListList<TData = Awaited<ReturnType<typeof apiV1ManufacturerListList>>, TError = unknown>(
 params?: ApiV1ManufacturerListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ManufacturerListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1ManufacturerListList<TData = Awaited<ReturnType<typeof apiV1ManufacturerListList>>, TError = unknown>(
 params?: ApiV1ManufacturerListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ManufacturerListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1ManufacturerListListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1OfferListList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OfferList[]>(
      {url: `/api/v1/offer/list/`, method: 'GET', signal
    },
      options);
    }
  

export const getApiV1OfferListListQueryKey = () => {
    return [`/api/v1/offer/list/`] as const;
    }

    
export const getApiV1OfferListListQueryOptions = <TData = Awaited<ReturnType<typeof apiV1OfferListList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1OfferListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1OfferListListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1OfferListList>>> = ({ signal }) => apiV1OfferListList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1OfferListList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1OfferListListQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1OfferListList>>>
export type ApiV1OfferListListQueryError = unknown


export function useApiV1OfferListList<TData = Awaited<ReturnType<typeof apiV1OfferListList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1OfferListList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1OfferListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1OfferListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1OfferListList<TData = Awaited<ReturnType<typeof apiV1OfferListList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1OfferListList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1OfferListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1OfferListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1OfferListList<TData = Awaited<ReturnType<typeof apiV1OfferListList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1OfferListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1OfferListList<TData = Awaited<ReturnType<typeof apiV1OfferListList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1OfferListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1OfferListListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1OfferUpdateUpdate = (
    id: number,
    offerUpdateBody: OfferUpdateBody,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<OfferUpdate>(
      {url: `/api/v1/offer/update/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: offerUpdateBody
    },
      options);
    }
  


export const getApiV1OfferUpdateUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1OfferUpdateUpdate>>, TError,{id: number;data: OfferUpdateBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1OfferUpdateUpdate>>, TError,{id: number;data: OfferUpdateBody}, TContext> => {

const mutationKey = ['apiV1OfferUpdateUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1OfferUpdateUpdate>>, {id: number;data: OfferUpdateBody}> = (props) => {
          const {id,data} = props ?? {};

          return  apiV1OfferUpdateUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1OfferUpdateUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1OfferUpdateUpdate>>>
    export type ApiV1OfferUpdateUpdateMutationBody = OfferUpdateBody
    export type ApiV1OfferUpdateUpdateMutationError = unknown

    export const useApiV1OfferUpdateUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1OfferUpdateUpdate>>, TError,{id: number;data: OfferUpdateBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiV1OfferUpdateUpdate>>,
        TError,
        {id: number;data: OfferUpdateBody},
        TContext
      > => {

      const mutationOptions = getApiV1OfferUpdateUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiV1OfferUpdatePartialUpdate = (
    id: number,
    offerUpdateBody: OfferUpdateBody,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<OfferUpdate>(
      {url: `/api/v1/offer/update/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: offerUpdateBody
    },
      options);
    }
  


export const getApiV1OfferUpdatePartialUpdateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1OfferUpdatePartialUpdate>>, TError,{id: number;data: OfferUpdateBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1OfferUpdatePartialUpdate>>, TError,{id: number;data: OfferUpdateBody}, TContext> => {

const mutationKey = ['apiV1OfferUpdatePartialUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1OfferUpdatePartialUpdate>>, {id: number;data: OfferUpdateBody}> = (props) => {
          const {id,data} = props ?? {};

          return  apiV1OfferUpdatePartialUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1OfferUpdatePartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1OfferUpdatePartialUpdate>>>
    export type ApiV1OfferUpdatePartialUpdateMutationBody = OfferUpdateBody
    export type ApiV1OfferUpdatePartialUpdateMutationError = unknown

    export const useApiV1OfferUpdatePartialUpdate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1OfferUpdatePartialUpdate>>, TError,{id: number;data: OfferUpdateBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiV1OfferUpdatePartialUpdate>>,
        TError,
        {id: number;data: OfferUpdateBody},
        TContext
      > => {

      const mutationOptions = getApiV1OfferUpdatePartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiV1PackageDetailRead = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PackageDetail>(
      {url: `/api/v1/package/detail/${id}/`, method: 'GET', signal
    },
      options);
    }
  

export const getApiV1PackageDetailReadQueryKey = (id?: number,) => {
    return [`/api/v1/package/detail/${id}/`] as const;
    }

    
export const getApiV1PackageDetailReadQueryOptions = <TData = Awaited<ReturnType<typeof apiV1PackageDetailRead>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1PackageDetailRead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1PackageDetailReadQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1PackageDetailRead>>> = ({ signal }) => apiV1PackageDetailRead(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1PackageDetailRead>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1PackageDetailReadQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1PackageDetailRead>>>
export type ApiV1PackageDetailReadQueryError = unknown


export function useApiV1PackageDetailRead<TData = Awaited<ReturnType<typeof apiV1PackageDetailRead>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1PackageDetailRead>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1PackageDetailRead>>,
          TError,
          Awaited<ReturnType<typeof apiV1PackageDetailRead>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1PackageDetailRead<TData = Awaited<ReturnType<typeof apiV1PackageDetailRead>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1PackageDetailRead>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1PackageDetailRead>>,
          TError,
          Awaited<ReturnType<typeof apiV1PackageDetailRead>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1PackageDetailRead<TData = Awaited<ReturnType<typeof apiV1PackageDetailRead>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1PackageDetailRead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1PackageDetailRead<TData = Awaited<ReturnType<typeof apiV1PackageDetailRead>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1PackageDetailRead>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1PackageDetailReadQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1PackageListList = (
    params?: ApiV1PackageListListParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PackageList[]>(
      {url: `/api/v1/package/list/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getApiV1PackageListListQueryKey = (params?: ApiV1PackageListListParams,) => {
    return [`/api/v1/package/list/`, ...(params ? [params]: [])] as const;
    }

    
export const getApiV1PackageListListQueryOptions = <TData = Awaited<ReturnType<typeof apiV1PackageListList>>, TError = unknown>(params?: ApiV1PackageListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1PackageListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1PackageListListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1PackageListList>>> = ({ signal }) => apiV1PackageListList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1PackageListList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1PackageListListQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1PackageListList>>>
export type ApiV1PackageListListQueryError = unknown


export function useApiV1PackageListList<TData = Awaited<ReturnType<typeof apiV1PackageListList>>, TError = unknown>(
 params: undefined |  ApiV1PackageListListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1PackageListList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1PackageListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1PackageListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1PackageListList<TData = Awaited<ReturnType<typeof apiV1PackageListList>>, TError = unknown>(
 params?: ApiV1PackageListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1PackageListList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1PackageListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1PackageListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1PackageListList<TData = Awaited<ReturnType<typeof apiV1PackageListList>>, TError = unknown>(
 params?: ApiV1PackageListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1PackageListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1PackageListList<TData = Awaited<ReturnType<typeof apiV1PackageListList>>, TError = unknown>(
 params?: ApiV1PackageListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1PackageListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1PackageListListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1ServiceApplyCreate = (
    userApply: NonReadonly<UserApply>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserApply>(
      {url: `/api/v1/service/apply/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userApply, signal
    },
      options);
    }
  


export const getApiV1ServiceApplyCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ServiceApplyCreate>>, TError,{data: NonReadonly<UserApply>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiV1ServiceApplyCreate>>, TError,{data: NonReadonly<UserApply>}, TContext> => {

const mutationKey = ['apiV1ServiceApplyCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiV1ServiceApplyCreate>>, {data: NonReadonly<UserApply>}> = (props) => {
          const {data} = props ?? {};

          return  apiV1ServiceApplyCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiV1ServiceApplyCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiV1ServiceApplyCreate>>>
    export type ApiV1ServiceApplyCreateMutationBody = NonReadonly<UserApply>
    export type ApiV1ServiceApplyCreateMutationError = unknown

    export const useApiV1ServiceApplyCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiV1ServiceApplyCreate>>, TError,{data: NonReadonly<UserApply>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiV1ServiceApplyCreate>>,
        TError,
        {data: NonReadonly<UserApply>},
        TContext
      > => {

      const mutationOptions = getApiV1ServiceApplyCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const apiV1ServiceListList = (
    params?: ApiV1ServiceListListParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AdditionalService[]>(
      {url: `/api/v1/service/list/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getApiV1ServiceListListQueryKey = (params?: ApiV1ServiceListListParams,) => {
    return [`/api/v1/service/list/`, ...(params ? [params]: [])] as const;
    }

    
export const getApiV1ServiceListListQueryOptions = <TData = Awaited<ReturnType<typeof apiV1ServiceListList>>, TError = unknown>(params?: ApiV1ServiceListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ServiceListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1ServiceListListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1ServiceListList>>> = ({ signal }) => apiV1ServiceListList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1ServiceListList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1ServiceListListQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1ServiceListList>>>
export type ApiV1ServiceListListQueryError = unknown


export function useApiV1ServiceListList<TData = Awaited<ReturnType<typeof apiV1ServiceListList>>, TError = unknown>(
 params: undefined |  ApiV1ServiceListListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ServiceListList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ServiceListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1ServiceListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ServiceListList<TData = Awaited<ReturnType<typeof apiV1ServiceListList>>, TError = unknown>(
 params?: ApiV1ServiceListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ServiceListList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1ServiceListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1ServiceListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1ServiceListList<TData = Awaited<ReturnType<typeof apiV1ServiceListList>>, TError = unknown>(
 params?: ApiV1ServiceListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ServiceListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1ServiceListList<TData = Awaited<ReturnType<typeof apiV1ServiceListList>>, TError = unknown>(
 params?: ApiV1ServiceListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1ServiceListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1ServiceListListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const apiV1SliderListList = (
    params?: ApiV1SliderListListParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Slider[]>(
      {url: `/api/v1/slider/list/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getApiV1SliderListListQueryKey = (params?: ApiV1SliderListListParams,) => {
    return [`/api/v1/slider/list/`, ...(params ? [params]: [])] as const;
    }

    
export const getApiV1SliderListListQueryOptions = <TData = Awaited<ReturnType<typeof apiV1SliderListList>>, TError = unknown>(params?: ApiV1SliderListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1SliderListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiV1SliderListListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiV1SliderListList>>> = ({ signal }) => apiV1SliderListList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiV1SliderListList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiV1SliderListListQueryResult = NonNullable<Awaited<ReturnType<typeof apiV1SliderListList>>>
export type ApiV1SliderListListQueryError = unknown


export function useApiV1SliderListList<TData = Awaited<ReturnType<typeof apiV1SliderListList>>, TError = unknown>(
 params: undefined |  ApiV1SliderListListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1SliderListList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1SliderListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1SliderListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1SliderListList<TData = Awaited<ReturnType<typeof apiV1SliderListList>>, TError = unknown>(
 params?: ApiV1SliderListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1SliderListList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiV1SliderListList>>,
          TError,
          Awaited<ReturnType<typeof apiV1SliderListList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiV1SliderListList<TData = Awaited<ReturnType<typeof apiV1SliderListList>>, TError = unknown>(
 params?: ApiV1SliderListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1SliderListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useApiV1SliderListList<TData = Awaited<ReturnType<typeof apiV1SliderListList>>, TError = unknown>(
 params?: ApiV1SliderListListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiV1SliderListList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiV1SliderListListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



